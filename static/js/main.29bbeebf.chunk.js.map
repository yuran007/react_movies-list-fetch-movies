{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","useState","query","setQuery","setMovie","setMovies","isLoading","setIsLoading","errorMessage","setErrorMessage","loadData","fetch","then","res","json","catch","Response","Error","getMovie","data","error","finally","handleSubmit","event","a","preventDefault","Title","imdbID","Poster","Plot","onSubmit","htmlFor","type","id","placeholder","classNames","value","onChange","currentTarget","disabled","onClick","newMovie","filter","oldMovie","undefined","length","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29bbeebf.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport { MoviesList } from '../MoviesList';\n\nexport const FindMovie: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie>();\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  const loadData = () => {\n    setIsLoading(true);\n\n    return getMovie(query)\n      .then(data => {\n        return data;\n      })\n      .catch(error => {\n        setErrorMessage(true);\n\n        return error;\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const data = await loadData();\n\n    const {\n      Title: title,\n      imdbID: imdbId,\n      Poster,\n      Plot: description,\n    } = data;\n\n    setMovie({\n      title,\n      description,\n      imgUrl: `${\n        Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : Poster\n      }`,\n      imdbUrl: `https://www.imdb.com/title/${imdbId}`,\n      imdbId,\n    });\n  };\n\n  const addToList = (newMovie: Movie) => {\n    setMovies([\n      ...movies.filter(oldMovie => oldMovie.imdbId !== newMovie.imdbId),\n      newMovie,\n    ]);\n    setMovie(undefined);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': errorMessage })}\n              value={query}\n              onChange={(event) => {\n                setQuery(event.currentTarget.value);\n                setErrorMessage(false);\n              }}\n            />\n          </div>\n\n          {errorMessage && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={`button is-light ${isLoading ? 'is-loading' : ''}`}\n              disabled={query === ''}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && !errorMessage && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => addToList(movie)}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && !errorMessage && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n      {movies.length > 0 && <MoviesList movies={movies} />}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=70043e6';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}